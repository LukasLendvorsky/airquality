esphome:
  name: llairquality
  includes:
    "helpers.hpp"
  on_boot: 
      - priority: 500
        then:
          - output.turn_on: PMSReset
          - output.turn_on: PMSSet
      - priority: 300
        then:
            - light.turn_on:
                id: indicator
                effect: Boot
                brightness: 25%
      - priority: -100
        then:
          - light.turn_on:
              id: indicator
              effect: IndicatorEffect
              brightness: 20%


esp32:
  board: nodemcu-32s
  framework:
    type: arduino


# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Llairquality Fallback Hotspot"
    password: "zhp7t0DdJt3d"


globals:
   - id: ind_worst # indicator of worst metric of air quality, used for led strip
     type: int
     restore_value: no
     initial_value: '100'
     setup_priority: 1000

captive_portal:

web_server:
  port: 80

# I2C port for sensors
i2c:
  scl: GPIO22
  sda: GPIO21
  frequency: 100kHz

# UART for PMS5003
uart:
  - rx_pin: GPIO16
    tx_pin: GPIO17
    baud_rate: 9600
    id: pms

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO13
    num_leds: 8
    id: indicator
    name: "Indicator"
    restore_mode: RESTORE_AND_OFF
    effects:
      - addressable_scan:
          name: Boot
          move_interval: 100ms
          scan_width: 1
      - addressable_lambda:
          name: "IndicatorEffect"
          update_interval: 1s
          lambda: |-
            float val = id(ind_worst);
            Color c = green_to_red((100-val)/100.0);
            it.all() = Color::BLACK;
            uint8_t num = round(val / 100.0 * 8);
            it.range(8-num, 8) = c;


sensor:
  # particulate sensor
  - platform: pmsx003
    type: PMS5003T
    pm_1_0:
      name: "Particulate Matter <1.0µm Concentration"
      id: pm_1_0
      on_value:
        lambda: 'update_worst();'
    pm_2_5:
      name: "Particulate Matter <2.5µm Concentration"
      id: pm_2_5
      on_value:
        lambda: 'update_worst();'
    pm_10_0:
      name: "Particulate Matter <10.0µm Concentration"
      id: pm_10_0
      on_value:
        lambda: 'update_worst();'
    temperature: 
      id: temperature
      name: "Temperature"
    humidity:
      id: humidity
      name: "Humidity"

    update_interval: 120s
    uart_id: pms

  #CO2 sensor
  - platform: scd30
    id: co2_sensor
    co2:
      name: "CO2"
      id: co2
      accuracy_decimals: 1    
      on_value:
        lambda: 'update_worst();'
    temperature:
      name: "Temperature SCD30"
      id: scd_temperature
      accuracy_decimals: 2
    humidity:
      name: "Humidity SCD30"
      id: scd_humidity
      accuracy_decimals: 1
    address: 0x61
    update_interval: 5s


  # Air quality indicators (0% = good, 100% = bad)
  - platform: template
    name: "Indicator CO2"
    id: ind_co2
    lambda: |-
      return to_quality(id(co2).state, 400, 2000);
    update_interval: never
  - platform: template
    name: "Indicator pm2,5um"
    id: ind_pm2_5
    lambda: |-
      return to_quality(id(pm_2_5).state, 15, 41);
    update_interval: never
  - platform: template
    name: "Indicator <10.0µm"
    id: ind_pm10
    lambda: |-
      return to_quality(id(pm_10_0).state, 54, 155);
    update_interval: never
  - platform: template
    name: "Indicator Worst"
    id: ind_worst_sensor
    lambda: |- 
      return id(ind_worst);
    update_interval: never
  
  # VOC + eCO2
  #- platform: sgp30
  #  eco2:
  #    name: "SGP eCO2"
  #    accuracy_decimals: 1
  #  tvoc:
  #    name: "TVOC"
  #    accuracy_decimals: 1
  #  store_baseline: yes
  #  address: 0x58
  #  update_interval: 1s

  # Brightness
  - platform: adc
    pin: GPIO33
    name: "Brightness"
    update_interval: 1s


output:
  - platform: gpio
    pin: GPIO4
    id: "PMSReset"
  - platform: gpio
    pin: GPIO5
    id: "PMSSet"



button:
  - platform: template
    name: "SCD30 Force manual calibration"
    entity_category: "config"
    on_press:
      then:
        - scd30.force_recalibration_with_reference:
            value: !lambda 'return id(co2_cal).state;'

number:
  - platform: template
    name: "CO2 calibration value"
    optimistic: true
    min_value: 350
    max_value: 4500
    step: 1
    id: co2_cal
    icon: "mdi:molecule-co2"
    entity_category: "config"